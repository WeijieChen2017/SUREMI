import os
import glob
import numpy as np
import matplotlib.pyplot as plt
import nibabel as nib

# folder_CT_GT = "./data_dir/Iman_CT/norm/"
hub_CT_name = [
    # "unet",
    # "unet_control_1e1",
    # "unet_control_1e8",
    # "unet_control_1e3",
    # "unet_control_1e3_mse",
    # "unet_control_ob_KL",
    # "unet_control_ob_KL_small",
    # "unet_BNN_KLe5",
    # "unet_BNN_KLe8",
    # "unet_BNN_KLe11",
    # "BNN_KLe6_flip",
    # "unet_dropout10",
    # "unet_dropout25",
    # "unet_dropout50",
    # "unet_dropout75",
    # "do10_MED_1",
    # "do25_MED_1",
    # "do50_MED_1",
    # "do10_MED_5",
    # "do10_MED_15",
    # "do25_MED_5",
    # "do25_MED_15",
    # "do50_MED_5",
    # "do50_MED_15",
    # "Unet_L1",
    # "Gau050_MRCT_ZD",
    # "Gau050_MRMR_ZD",
    # "Gau025_MRCT_ZD",
    # "Gau025_MRMR_ZD",
    # "Poi100_MRCT_ZD",
    # "Poi100_MRMR_ZD",
    # "Poi025_MRCT_ZD",
    # "Poi025_MRMR_ZD",
    # "S&P025_MRCT_ZD",
    # "S&P025_MRMR_ZD",
    # "S&P050_MRCT_ZD",
    # "S&P050_MRMR_ZD",
    # "SPK025_MRCT_ZD",
    # "SPK025_MRMR_ZD",
    # "SPK050_MRCT_ZD",
    # "SPK050_MRMR_ZD",
    # "RIC005_MRMR_HD",
    # "RIC005_MRCT_HD",
    # "RIC010_MRMR_HD",
    # "RIC010_MRCT_HD",
    # "RAY005_MRMR_HD",
    # "RAY005_MRCT_HD",
    # "RAY010_MRMR_HD",
    # "RAY010_MRCT_HD",
    # "RIC005_MRMR_ZD",
    # "RIC005_MRCT_ZD",
    # "RIC010_MRMR_ZD",
    # "RIC010_MRCT_ZD",
    # "RAY005_MRMR_ZD",
    # "RAY005_MRCT_ZD",
    # "RAY010_MRMR_ZD",
    # "RAY010_MRCT_ZD",
    # "GCN_0001",
    # "GCN_0010",
    # "GCN_0100",
    # "GCN_0500",
    # "model_G",
    # "model_E",
    # "pixelGAN",
    # "pixelGAN_abs",
    # "pixelGAN_wdist_abs_clip_e1",
    # "pixelGAN_wdist_abs_clip_e2",
    # "pixelGAN_wdist_abs_clip_e3",
    # "pixelGAN_wdist_clip_e1",
    # "pixelGAN_wdist_clip_e2",
    # "pixelGAN_wdist_clip_e3",
    # "pixelGAN_epsilon_e1",
    # "pixelGAN_epsilon_e2",
    # "222222222",
    # "333333333",
    # "224484422",
    # "884424488",
    # "R00100_D50",
    # "R00010_D50",
    # "R00001_D50",
    # "R00100_D25",
    # "R00100_D75",
    # "181_200_rdp000",
    # "181_200_rdp020",
    # "181_200_rdp040",
    # "181_200_rdp060",
    # "181_200_rdp080",
    # "181_200_rdp100",
    # "47_57_rdp000",
    # "47_57_rdp020",
    # "47_57_rdp040",
    # "47_57_rdp060",
    # "47_57_rdp080",
    # "47_57_rdp100",
    # "altr_unet",
    # "base_unet",
    "BTCV_v1_unet",
    "BTCV_v2_unetr",
    "BTCV_v2_unetr_pre",
    ]
hub_CT_folder = [
    # "./project_dir/Bayesian_unet_v1/",
    # "./project_dir/Bayesian_unet_v1_control/",
    # "./project_dir/Bayesian_unet_v2_beta_1e8/",
    # "./project_dir/Bayesian_unet_v3_beta_1e3/",
    # "./project_dir/Bayesian_unet_v4_beta_1e3_mse/",
    # "./project_dir/Bayesian_unet_v5_ob_KL/",
    # "./project_dir/Bayesian_unet_v6_ob_KL_small/",
    # "./project_dir/Bayesian_unet_v8_unet_BNN_KLe5/",
    # "./project_dir/Bayesian_unet_v7_unet_BNN_KLe8/",
    # "./project_dir/Bayesian_unet_v10_unet_BNN_KLe11/",
    # "./project_dir/Bayesian_unet_v16_unet_BNN_KLe6_flip/",
    # "./project_dir/Bayesian_unet_v12_unet_drop10/",
    # "./project_dir/Bayesian_unet_v13_unet_drop25/",
    # "./project_dir/Bayesian_unet_v14_unet_drop50/",
    # "./project_dir/Bayesian_unet_v15_unet_drop75/",
    # "./project_dir/Bayesian_MTGD_v1_unet_do10_MTGD5/",
    # "./project_dir/Bayesian_MTGD_v2_unet_do10_MTGD15/",
    # "./project_dir/Bayesian_MTGD_v3_unet_do25_MTGD5/",
    # "./project_dir/Bayesian_MTGD_v4_unet_do25_MTGD15/",
    # "./project_dir/Bayesian_MTGD_v45unet_do50_MTGD5/",
    # "./project_dir/Bayesian_MTGD_v45unet_do50_MTGD15/",
    # "./project_dir/Unet_Monai_Iman_v2/"
    # "./project_dir/Bayesian_HDMGD_v1_Gau050_MRCT/",
    # "./project_dir/Bayesian_HDMGD_v1_Gau050_MRMR/",
    # "./project_dir/Bayesian_HDMGD_v2_Gau025_MRCT/",
    # "./project_dir/Bayesian_HDMGD_v2_Gau025_MRMR/",
    # "./project_dir/Bayesian_HDMGD_v3_Poi100_MRCT/",
    # "./project_dir/Bayesian_HDMGD_v3_Poi100_MRMR/",
    # "./project_dir/Bayesian_HDMGD_v4_Poi025_MRCT/",
    # "./project_dir/Bayesian_HDMGD_v4_Poi025_MRMR/",
    # "./project_dir/Bayesian_HDMGD_v5_S&P025_MRCT/",
    # "./project_dir/Bayesian_HDMGD_v5_S&P025_MRMR/",
    # "./project_dir/Bayesian_HDMGD_v6_S&P050_MRCT/",
    # "./project_dir/Bayesian_HDMGD_v6_S&P050_MRMR/",
    # "./project_dir/Bayesian_HDMGD_v7_SPK025_MRCT/",
    # "./project_dir/Bayesian_HDMGD_v7_SPK025_MRMR/",
    # "./project_dir/Bayesian_HDMGD_v8_SPK050_MRCT/",
    # "./project_dir/Bayesian_HDMGD_v8_SPK050_MRMR/",
    # "./project_dir/Bayesian_ZDMGD_v1_Gau050_MRCT/",
    # "./project_dir/Bayesian_ZDMGD_v1_Gau050_MRMR/",
    # "./project_dir/Bayesian_ZDMGD_v2_Gau025_MRCT/",
    # "./project_dir/Bayesian_ZDMGD_v2_Gau025_MRMR/",
    # "./project_dir/Bayesian_ZDMGD_v3_Poi100_MRCT/",
    # "./project_dir/Bayesian_ZDMGD_v3_Poi100_MRMR/",
    # "./project_dir/Bayesian_ZDMGD_v4_Poi025_MRCT/",
    # "./project_dir/Bayesian_ZDMGD_v4_Poi025_MRMR/",
    # "./project_dir/Bayesian_ZDMGD_v5_S&P025_MRCT/",
    # "./project_dir/Bayesian_ZDMGD_v5_S&P025_MRMR/",
    # "./project_dir/Bayesian_ZDMGD_v6_S&P050_MRCT/",
    # "./project_dir/Bayesian_ZDMGD_v6_S&P050_MRMR/",
    # "./project_dir/Bayesian_ZDMGD_v7_SPK025_MRCT/",
    # "./project_dir/Bayesian_ZDMGD_v7_SPK025_MRMR/",
    # "./project_dir/Bayesian_ZDMGD_v8_SPK050_MRCT/",
    # "./project_dir/Bayesian_ZDMGD_v8_SPK050_MRMR/",
    # "Bayesian_HDMGD_v9_RIC005_MRMR",
    # "Bayesian_HDMGD_v9_RIC005_MRCT",
    # "Bayesian_HDMGD_v10_RIC010_MRMR",
    # "Bayesian_HDMGD_v10_RIC010_MRCT",
    # "Bayesian_HDMGD_v11_RAY005_MRMR",
    # "Bayesian_HDMGD_v11_RAY005_MRCT",
    # "Bayesian_HDMGD_v12_RAY010_MRMR",
    # "Bayesian_HDMGD_v12_RAY010_MRCT",
    # "Bayesian_ZDMGD_v9_RIC005_MRMR",
    # "Bayesian_ZDMGD_v9_RIC005_MRCT",
    # "Bayesian_ZDMGD_v10_RIC010_MRMR",
    # "Bayesian_ZDMGD_v10_RIC010_MRCT",
    # "Bayesian_ZDMGD_v11_RAY005_MRMR",
    # "Bayesian_ZDMGD_v11_RAY005_MRCT",
    # "Bayesian_ZDMGD_v12_RAY010_MRMR",
    # "Bayesian_ZDMGD_v12_RAY010_MRCT",
    # "Bayesian_HDMGD_CM_ZeroDropout_0001",
    # "Bayesian_HDMGD_CM_ZeroDropout_0010",
    # "Bayesian_HDMGD_CM_ZeroDropout_0100",
    # "Bayesian_HDMGD_CM_ZeroDropout_0500",
    # "Bayesian_HDMGD_GCN_0001",
    # "Bayesian_HDMGD_GCN_0010",
    # "Bayesian_HDMGD_GCN_0100",
    # "Bayesian_HDMGD_GCN_0500",
    # "Bayesian_HDMGD_GCN_v2",
    # "Bayesian_HDMGD_GCN_v3",
    # "Bayesian_HDMGD_GCN_v4",
    # "GCN_v7_pixelGAN",
    # "GCN_v7_pixelGAN_abs",
    # "GCN_v8_pixelGAN_wdist_abs_e1",
    # "GCN_v8_pixelGAN_wdist_abs_e2",
    # "GCN_v8_pixelGAN_wdist_abs_e3",
    # "GCN_v8_pixelGAN_wdist_e1",
    # "GCN_v8_pixelGAN_wdist_e2",
    # "GCN_v8_pixelGAN_wdist_e3",
    # "GCN_v9_pixelGAN_epsilon_e1",
    # "GCN_v9_pixelGAN_epsilon_e2",
    # "MDO_v1_222222222",
    # "MDO_v2_333333333",
    # "MDO_v3_224484422",
    # "MDO_v4_884424488",
    # "RDO_v1_R00100_D50",
    # "RDO_v1_R00010_D50",
    # "RDO_v1_R00001_D50",
    # "RDO_v1_R00100_D25",
    # "RDO_v1_R00100_D75",
    # "Theseus_v2_181_200_rdp0",
    # "Theseus_v2_181_200_rdp10",
    # "Theseus_v2_181_200_rdp100",
    # "Theseus_v2_181_200_rdp020",
    # "Theseus_v2_181_200_rdp040",
    # "Theseus_v2_181_200_rdp060",
    # "Theseus_v2_181_200_rdp080",
    # "Theseus_v2_181_200_rdp1",
    # "Theseus_v2_47_57_rdp000",
    # "Theseus_v2_47_57_rdp020",
    # "Theseus_v2_47_57_rdp040",
    # "Theseus_v2_47_57_rdp060",
    # "Theseus_v2_47_57_rdp080",
    # "Theseus_v2_47_57_rdp100",
    # "Unet_Monai_Iman_v3",
    # "Unet_Monai_Iman_v2",
    "BTCV_v1_unet",
    "BTCV_v2_unetr",
    "BTCV_v2_unetr_pre",
    ]

train_loss = []
val_loss = []

for cnt_CT_folder, name_CT_folder in enumerate(hub_CT_folder):
    CT_folder = "./project_dir/" + name_CT_folder
    list_train_loss = sorted(glob.glob(CT_folder+"/loss/*train*.npy"))
    list_val_loss = sorted(glob.glob(CT_folder+"/loss/*val*.npy"))
    model_name = hub_CT_name[cnt_CT_folder]
    curr_train_loss = np.zeros((len(list_train_loss), 3))
    curr_val_loss = np.zeros((len(list_val_loss), 3))
    for cnt_epoch, filepath in enumerate(list_train_loss):
        print(filepath)
        data = np.load(filepath)
        if len(data.shape) > 1:
            if data.shape[1]> 1:
                for idx_ds in range(data.shape[1]):
                    curr_train_loss[cnt_epoch, idx_ds] = np.mean(data[:, idx_ds])
            else:
                curr_train_loss[cnt_epoch, 0] = np.mean(data)
        else:
            curr_train_loss[cnt_epoch, 0] = np.mean(data)
    for cnt_epoch, filepath in enumerate(list_val_loss):
        print(filepath)
        data = np.load(filepath)
        if len(data.shape) > 1:
            if data.shape[1]> 1:
                for idx_ds in range(data.shape[1]):
                    curr_val_loss[cnt_epoch, idx_ds] = np.mean(data[:, idx_ds])
            else:
                curr_val_loss[cnt_epoch, 0] = np.mean(data)
        else:
            curr_val_loss[cnt_epoch, 0] = np.mean(data)
    train_loss.append([model_name, curr_train_loss])
    val_loss.append([model_name, curr_val_loss])

all_loss = [train_loss, val_loss]
save_name = "./metric_bayesian/LOSS_"+"_".join(hub_CT_name)+".npy"
print(save_name)
np.save(save_name, np.asarray(all_loss, dtype=object))

